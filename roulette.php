<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stake Roulette</title>
  
</head>
<body>
<div class="container">
    <div class="header">
        <h1>üé∞ Stake Roulette</h1>
        <div class="balance">–ë–∞–ª–∞–Ω—Å: $<span id="balance">1000</span></div>
    </div>

    <div class="roulette-container">
        <div class="roulette-wheel" id="rouletteWheel"></div>
        <div class="roulette-pointer"></div>
    </div>

    <button class="spin-button" id="spinButton">üé≤ –ö—Ä—É—Ç–∏—Ç–∏</button>

    <div class="betting-section">
        <div class="bet-controls">
            <input type="number" class="bet-input" id="betAmount" value="10" min="1" max="1000">
            <div class="bet-buttons">
                <button class="bet-btn" onclick="setBetAmount(1)">1</button>
                <button class="bet-btn" onclick="setBetAmount(10)">10</button>
                <button class="bet-btn" onclick="setBetAmount(50)">50</button>
                <button class="bet-btn" onclick="setBetAmount(100)">100</button>
            </div>
        </div>

        <div class="total-bet">
            –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞–≤–∫–∞: $<span id="totalBet">0</span>
        </div>

        <div class="betting-grid">
            <div class="bet-option red" data-bet="red">
                –ß–µ—Ä–≤–æ–Ω–µ<br>1:1
            </div>
            <div class="bet-option black" data-bet="black">
                –ß–æ—Ä–Ω–µ<br>1:1
            </div>
            <div class="bet-option green" data-bet="even">
                –ü–∞—Ä–Ω–µ<br>1:1
            </div>
            <div class="bet-option green" data-bet="odd">
                –ù–µ–ø–∞—Ä–Ω–µ<br>1:1
            </div>
            <div class="bet-option red" data-bet="1-18">
                1-18<br>1:1
            </div>
            <div class="bet-option black" data-bet="19-36">
                19-36<br>1:1
            </div>
        </div>

        <div class="numbers-grid" id="numbersGrid">
            <!-- Numbers will be generated by JavaScript -->
        </div>

        <button class="clear-bets" onclick="clearAllBets()">–û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞–≤–∫–∏</button>
    </div>
</div>

<div class="modal" id="resultModal">
    <div class="modal-content">
        <h2 id="resultTitle">–†–µ–∑—É–ª—å—Ç–∞—Ç</h2>
        <div class="winning-number" id="winningNumber">0</div>
        <div id="resultMessage"></div>
        <div id="winAmount"></div>
    </div>
</div>

<script>
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∏
    let balance = 1000;
    let isSpinning = false;
    let bets = {};
    let totalBetAmount = 0;

    // –ß–∏—Å–ª–∞ —Ä—É–ª–µ—Ç–∫–∏ –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏
    const rouletteNumbers = [
        {number: 0, color: 'green'},
        {number: 32, color: 'red'}, {number: 15, color: 'black'}, {number: 19, color: 'red'},
        {number: 4, color: 'black'}, {number: 21, color: 'red'}, {number: 2, color: 'black'},
        {number: 25, color: 'red'}, {number: 17, color: 'black'}, {number: 34, color: 'red'},
        {number: 6, color: 'black'}, {number: 27, color: 'red'}, {number: 13, color: 'black'},
        {number: 36, color: 'red'}, {number: 11, color: 'black'}, {number: 30, color: 'red'},
        {number: 8, color: 'black'}, {number: 23, color: 'red'}, {number: 10, color: 'black'},
        {number: 5, color: 'red'}, {number: 24, color: 'black'}, {number: 16, color: 'red'},
        {number: 33, color: 'black'}, {number: 1, color: 'red'}, {number: 20, color: 'black'},
        {number: 14, color: 'red'}, {number: 31, color: 'black'}, {number: 9, color: 'red'},
        {number: 22, color: 'black'}, {number: 18, color: 'red'}, {number: 29, color: 'black'},
        {number: 7, color: 'red'}, {number: 28, color: 'black'}, {number: 12, color: 'red'},
        {number: 35, color: 'black'}, {number: 3, color: 'red'}, {number: 26, color: 'black'}
    ];

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∏
    function initGame() {
        generateNumbersGrid();
        updateBalance();
        updateTotalBet();
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—ñ—Ç–∫–∏ –Ω–æ–º–µ—Ä—ñ–≤
    function generateNumbersGrid() {
        const numbersGrid = document.getElementById('numbersGrid');
        numbersGrid.innerHTML = '';

        for (let i = 0; i <= 36; i++) {
            const numberDiv = document.createElement('div');
            numberDiv.className = 'number-bet';
            numberDiv.textContent = i;
            numberDiv.dataset.bet = i;
            numberDiv.onclick = () => placeBet(i);

            if (i === 0) {
                numberDiv.classList.add('green');
            } else if ([1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36].includes(i)) {
                numberDiv.classList.add('red');
            } else {
                numberDiv.classList.add('black');
            }

            numbersGrid.appendChild(numberDiv);
        }
    }

    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—É–º–∏ —Å—Ç–∞–≤–∫–∏
    function setBetAmount(amount) {
        document.getElementById('betAmount').value = amount;
    }

    // –†–æ–∑–º—ñ—â–µ–Ω–Ω—è —Å—Ç–∞–≤–∫–∏
    function placeBet(betType) {
        if (isSpinning) return;

        const betAmount = parseInt(document.getElementById('betAmount').value);
        if (betAmount <= 0 || betAmount > balance) return;

        if (!bets[betType]) {
            bets[betType] = 0;
        }

        bets[betType] += betAmount;
        totalBetAmount += betAmount;

        updateBetDisplay();
        updateTotalBet();
    }

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π –¥–ª—è —Å—Ç–∞–≤–æ–∫
    document.querySelectorAll('.bet-option').forEach(option => {
        option.addEventListener('click', () => {
            placeBet(option.dataset.bet);
        });
    });

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–≤–æ–∫
    function updateBetDisplay() {
        // –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –≤–∏–¥—ñ–ª–µ–Ω—å
        document.querySelectorAll('.bet-option.active, .number-bet.active').forEach(el => {
            el.classList.remove('active');
            const amountEl = el.querySelector('.bet-amount');
            if (amountEl) amountEl.remove();
        });

        // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç–∞–≤–æ–∫
        Object.keys(bets).forEach(betType => {
            const amount = bets[betType];
            if (amount > 0) {
                const element = document.querySelector(`[data-bet="${betType}"]`);
                if (element) {
                    element.classList.add('active');

                    const amountEl = document.createElement('div');
                    amountEl.className = 'bet-amount';
                    amountEl.textContent = amount;
                    element.appendChild(amountEl);
                }
            }
        });
    }

    // –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å—Ç–∞–≤–æ–∫
    function clearAllBets() {
        if (isSpinning) return;

        bets = {};
        totalBetAmount = 0;
        updateBetDisplay();
        updateTotalBet();
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞–≤–∫–∏
    function updateTotalBet() {
        document.getElementById('totalBet').textContent = totalBetAmount;
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
    function updateBalance() {
        document.getElementById('balance').textContent = balance;
    }

    // –û–±–µ—Ä—Ç–∞–Ω–Ω—è —Ä—É–ª–µ—Ç–∫–∏
    function spinRoulette() {
        if (isSpinning || totalBetAmount === 0 || totalBetAmount > balance) return;

        isSpinning = true;
        balance -= totalBetAmount;
        updateBalance();

        document.getElementById('spinButton').disabled = true;
        document.getElementById('spinButton').textContent = 'üîÑ –ö—Ä—É—Ç–∏—Ç—å—Å—è...';

        // –í–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ
        const randomIndex = Math.floor(Math.random() * rouletteNumbers.length);
        const winningNumber = rouletteNumbers[randomIndex];

        // –û–±–µ—Ä—Ç–∞–Ω–Ω—è –∫–æ–ª–µ—Å–∞
        const wheel = document.getElementById('rouletteWheel');
        const rotation = 360 * 5 + (randomIndex * (360 / rouletteNumbers.length));
        wheel.style.transform = `rotate(${rotation}deg)`;

        // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
        setTimeout(() => {
            showResult(winningNumber);
            isSpinning = false;
            document.getElementById('spinButton').disabled = false;
            document.getElementById('spinButton').textContent = 'üé≤ –ö—Ä—É—Ç–∏—Ç–∏';
        }, 3000);
    }

    // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    function showResult(winningNumber) {
        const modal = document.getElementById('resultModal');
        const resultTitle = document.getElementById('resultTitle');
        const winningNumberEl = document.getElementById('winningNumber');
        const resultMessage = document.getElementById('resultMessage');
        const winAmountEl = document.getElementById('winAmount');

        winningNumberEl.textContent = winningNumber.number;
        winningNumberEl.className = `winning-number ${winningNumber.color}`;

        let totalWin = 0;
        let winningBets = [];

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–≥—Ä–∞—à–Ω–∏—Ö —Å—Ç–∞–≤–æ–∫
        Object.keys(bets).forEach(betType => {
            const betAmount = bets[betType];
            if (betAmount > 0) {
                let isWin = false;
                let multiplier = 0;

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ —Å—Ç–∞–≤–æ–∫
                if (betType == winningNumber.number) {
                    isWin = true;
                    multiplier = 35; // 35:1 –¥–ª—è –ø—Ä—è–º–æ—ó —Å—Ç–∞–≤–∫–∏
                } else if (betType === 'red' && winningNumber.color === 'red') {
                    isWin = true;
                    multiplier = 1;
                } else if (betType === 'black' && winningNumber.color === 'black') {
                    isWin = true;
                    multiplier = 1;
                } else if (betType === 'even' && winningNumber.number % 2 === 0 && winningNumber.number !== 0) {
                    isWin = true;
                    multiplier = 1;
                } else if (betType === 'odd' && winningNumber.number % 2 === 1) {
                    isWin = true;
                    multiplier = 1;
                } else if (betType === '1-18' && winningNumber.number >= 1 && winningNumber.number <= 18) {
                    isWin = true;
                    multiplier = 1;
                } else if (betType === '19-36' && winningNumber.number >= 19 && winningNumber.number <= 36) {
                    isWin = true;
                    multiplier = 1;
                }

                if (isWin) {
                    const winAmount = betAmount * (multiplier + 1);
                    totalWin += winAmount;
                    winningBets.push({type: betType, amount: winAmount});
                }
            }
        });

        balance += totalWin;
        updateBalance();

        // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        if (totalWin > 0) {
            resultTitle.textContent = 'üéâ –í–∏–≥—Ä–∞—à!';
            resultTitle.className = 'win';
            resultMessage.textContent = `–ù–æ–º–µ—Ä ${winningNumber.number} (${winningNumber.color === 'red' ? '—á–µ—Ä–≤–æ–Ω–µ' : winningNumber.color === 'black' ? '—á–æ—Ä–Ω–µ' : '–∑–µ–ª–µ–Ω–µ'})`;
            winAmountEl.textContent = `–í–∏–≥—Ä–∞—à: $${totalWin}`;
            winAmountEl.className = 'win';
        } else {
            resultTitle.textContent = 'üòû –ü—Ä–æ–≥—Ä–∞—à';
            resultTitle.className = 'lose';
            resultMessage.textContent = `–ù–æ–º–µ—Ä ${winningNumber.number} (${winningNumber.color === 'red' ? '—á–µ—Ä–≤–æ–Ω–µ' : winningNumber.color === 'black' ? '—á–æ—Ä–Ω–µ' : '–∑–µ–ª–µ–Ω–µ'})`;
            winAmountEl.textContent = `–ü—Ä–æ–≥—Ä–∞—à: $${totalBetAmount}`;
            winAmountEl.className = 'lose';
        }

        // –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        modal.classList.add('show');

        // –ü—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
        setTimeout(() => {
            modal.classList.remove('show');
            clearAllBets();
        }, 2000);
    }

    // –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è
    document.getElementById('spinButton').addEventListener('click', spinRoulette);

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∏ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
    window.addEventListener('load', initGame);
</script>
</body>
</html>